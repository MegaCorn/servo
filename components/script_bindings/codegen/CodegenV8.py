# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Common codegen classes.

from V8Array import v8Array
from V8Enum import v8Enum
from V8Extend import v8Extend
from V8Function import v8Function
from V8Getter import v8Getter
from V8Iterable import v8Iterable
from V8Setter import v8Setter

from CodegenRust import (
    CGWrapper,
    CGList,
    CGGeneric,
    CGThing,
    stripTrailingWhitespace,
    getAllTypes,
    getModuleFromObject,
    CGUnionStruct,
    CGUnionConversionStruct,
    CGImports,
    operator,
    AUTOGENERATED_WARNING_COMMENT,
)

def v8AddTemplateHeader(cgthings, descriptors):
    name = ""
    for descriptor in descriptors:
        name = descriptor.concreteType
        break
    if name == "console":
        name = "Console" # servo命名bug?
    if name != "NodeFilter": # NodeFilter定义在binding里
        name = f"crate::dom::types::{name}"
    code = CGGeneric(f"""
impl {name} {{
""")
    cgthings.append(code)


def v8AddTemplateCall(cgthings):
    code = CGGeneric(f"""
pub fn new_template<'s>(&self, scope: &mut v8::HandleScope<'s>) -> v8::Local<'s, v8::ObjectTemplate> {{
""")
    cgthings.append(code)


def v8AddTemplateTail(cgthings):
    code = CGGeneric(f"""
    template
}}
}}
""")
    cgthings.append(code)


def v8AddTemplateImpl(cgthings, descriptors):
    for descriptor in descriptors:
        for member in descriptor.interface.members:
            if member.isAttr() and not member.isStatic():
                attr = member.identifier.name.replace("-", "_") # rust不允许函数名出现-
                getterCode = v8Getter(attr, descriptor, member)
                if (member.readonly): # 只读属性仅实现get
                    cgthings.append(getterCode)
                    getterCodeTail = CGGeneric(f"""
    v8_template_add_getter!(scope, template, getter_{attr}, {attr});
""")
                    cgthings.append(getterCodeTail)
                else: # 可读写属性实现get和set
                    setterCode = v8Setter(attr, descriptor, member)
                    cgthings.append(getterCode)
                    cgthings.append(setterCode)
                    setterCodeTail = CGGeneric(f"""
    v8_template_add_getter_and_setter!(scope, template, getter_{attr}, setter_{attr}, {attr});
""")
                    cgthings.append(setterCodeTail)

        v8Function(descriptor, cgthings)


def genV8BindingCode(cgthings, descriptors, enums):
    if len(descriptors) == 0:
        return
    v8AddTemplateHeader(cgthings, descriptors)
    v8Enum(cgthings, enums)
    v8AddTemplateCall(cgthings)
    v8Extend(cgthings, descriptors)
    v8Array(cgthings, descriptors)
    v8Iterable(cgthings, descriptors)
    v8AddTemplateImpl(cgthings, descriptors)
    v8AddTemplateTail(cgthings)

class CGBindingRootV8(CGThing):
    def __init__(self, config, prefix, webIDLFile):
        descriptors = config.getDescriptors(webIDLFile=webIDLFile,
                                            hasInterfaceObject=True)

        descriptors.extend(config.getDescriptors(webIDLFile=webIDLFile,
                                                 hasInterfaceObject=False,
                                                 isCallback=False,
                                                 register=True))

        dictionaries = config.getDictionaries(webIDLFile=webIDLFile)

        mainCallbacks = config.getCallbacks(webIDLFile=webIDLFile)
        callbackDescriptors = config.getDescriptors(webIDLFile=webIDLFile,
                                                    isCallback=True)

        enums = config.getEnums(webIDLFile)
        typedefs = config.getTypedefs(webIDLFile)

        if not (descriptors or dictionaries or mainCallbacks or callbackDescriptors or enums):
            self.root = None
            return

        cgthings = []

        # Do codegen for v8 template
        genV8BindingCode(cgthings, descriptors, enums)

        # And make sure we have the right number of newlines at the end
        curr = CGWrapper(CGList(cgthings, ""), post="")

        # Store the final result.
        self.root = curr

    def define(self):
        if not self.root:
            return None
        return stripTrailingWhitespace(self.root.define())