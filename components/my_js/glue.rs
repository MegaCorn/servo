/* automatically generated by rust-bindgen 0.69.5 */

use js::jsapi::{
    JSContext, ServoSizes, JobQueue, Dispatchable, Dispatchable_MaybeShuttingDown,
    JSErrorFormatString, BuildIdCharVector, StreamConsumer,
};
use js::glue::{
    GetSize, JobQueueTraps,
};

pub fn CollectServoSizes(
    cx: *mut JSContext,
    sizes: *mut ServoSizes,
    gs: GetSize,
) -> bool {
    true
}

pub fn CreateJobQueue(
    aTraps: *const JobQueueTraps,
    aQueue: *const ::std::os::raw::c_void,
) -> *mut JobQueue {
    std::ptr::null_mut()
}

pub fn DeleteJobQueue(queue: *mut JobQueue) {}

pub fn DispatchableRun(
    cx: *mut JSContext,
    ptr: *mut Dispatchable,
    mb: Dispatchable_MaybeShuttingDown,
) {}

pub fn RUST_js_GetErrorMessage(
    userRef: *mut ::std::os::raw::c_void,
    errorNumber: u32,
) -> *const JSErrorFormatString {
    std::ptr::null_mut()
}

pub fn SetBuildId(
    buildId: *mut BuildIdCharVector,
    chars: *const ::std::os::raw::c_char,
    len: usize,
) -> bool {
    true
}

pub fn StreamConsumerConsumeChunk(
    sc: *mut StreamConsumer,
    begin: *const u8,
    length: usize,
) -> bool {
    true
}

pub fn StreamConsumerNoteResponseURLs(
    sc: *mut StreamConsumer,
    maybeUrl: *const ::std::os::raw::c_char,
    maybeSourceMapUrl: *const ::std::os::raw::c_char,
) {}

pub fn StreamConsumerStreamEnd(sc: *mut StreamConsumer) {}

pub fn StreamConsumerStreamError(sc: *mut StreamConsumer, errorCode: usize) {}
